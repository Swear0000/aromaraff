import asyncio
from aiogram import Bot, Dispatcher, Router, types, F
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton
import aiosqlite
import smtplib
from email.mime.text import MIMEText
from openpyxl import Workbook
import os
import json
import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
BOT_TOKEN = '8034399145:AAEVIsikLZDVD3aGMJ8cDZaeTN91VOivAHM'  # –í—Å—Ç–∞–≤—å —Ç–æ–∫–µ–Ω –æ—Ç @BotFather
YOUR_ADMIN_ID = 6329978401  # –í—Å—Ç–∞–≤—å —Å–≤–æ–π Telegram ID
ADMIN_EMAIL = 'swear000@yandex.ru'  # –í—Å—Ç–∞–≤—å —Å–≤–æ–π –Ø–Ω–¥–µ–∫—Å email
EMAIL_PASSWORD = 'cobrcbopfkzzfisr'  # –í—Å—Ç–∞–≤—å –ø–∞—Ä–æ–ª—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –æ—Ç –Ø–Ω–¥–µ–∫—Å–∞

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –∫–æ—Ä–∑–∏–Ω—ã
CART_LIFETIME_DAYS = 14  # –ö–æ—Ä–∑–∏–Ω–∞ —Ö—Ä–∞–Ω–∏—Ç—Å—è 2 –Ω–µ–¥–µ–ª–∏
CLEANUP_INTERVAL_HOURS = 24  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –æ—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∫–æ—Ä–∑–∏–Ω —Ä–∞–∑ –≤ 24 —á–∞—Å–∞

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()
router = Router()

# --- –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM ---
class AdminStates(StatesGroup):
    add_product_name = State()
    add_product_price = State()
    add_product_description = State()
    add_product_quantity = State()
    update_quantity_select_product = State()
    update_quantity_enter_new_qty = State()
    edit_product_select = State()
    edit_product_menu = State()
    edit_product_name_input = State()
    edit_product_price_input = State()
    edit_product_description_input = State()

class UserStates(StatesGroup):
    awaiting_delivery_name = State()
    awaiting_delivery_address = State()
    awaiting_delivery_phone = State()
    awaiting_order_confirmation = State()  # –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
    cart_remove_select_item = State()
    cart_change_qty_enter_new_qty = State()

# --- –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ ---
user_cart = {}  # user_id -> list of (product_id, quantity)

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ä–æ—É—Ç–µ—Ä–∞
dp.include_router(router)

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–æ—Ä–∑–∏–Ω–æ–π –≤ –ë–î ---
async def load_user_cart_from_db(user_id):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ—Ä–∑–∏–Ω—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."""
    async with aiosqlite.connect("products.db") as db:
        cursor = await db.execute("SELECT cart_items FROM user_carts WHERE user_id = ?", (user_id,))
        result = await cursor.fetchone()
        if result and result[0]:
            print(f"DEBUG: Loaded cart for user {user_id}: {result[0]}")
            return json.loads(result[0])
        print(f"DEBUG: No cart found or empty cart for user {user_id}")
        return []

async def save_user_cart_to_db(user_id, cart):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∫–æ—Ä–∑–∏–Ω—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –º–µ—Ç–∫—É –≤—Ä–µ–º–µ–Ω–∏."""
    async with aiosqlite.connect("products.db") as db:
        cart_json = json.dumps(cart)
        current_time = datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')
        await db.execute(
            "INSERT OR REPLACE INTO user_carts (user_id, cart_items, last_updated) VALUES (?, ?, ?)",
            (user_id, cart_json, current_time)
        )
        await db.commit()
        print(f"DEBUG: Saved cart for user {user_id}: {cart_json} at {current_time}")

async def init_db():
    async with aiosqlite.connect("products.db") as db:
        await db.execute("""
            CREATE TABLE IF NOT EXISTS products (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                name TEXT,
                price INTEGER,
                description TEXT,
                quantity INTEGER
            )""")
        await db.execute("""
            CREATE TABLE IF NOT EXISTS orders (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER,
                delivery_info TEXT,
                status TEXT DEFAULT '–û—Ñ–æ—Ä–º–ª–µ–Ω'
            )""")
        await db.execute("""
            CREATE TABLE IF NOT EXISTS order_items (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                order_id INTEGER,
                product_id INTEGER,
                quantity INTEGER
            )""")
        cursor = await db.execute("SELECT name FROM sqlite_master WHERE type='table' AND name='user_carts'")
        user_carts_exists = await cursor.fetchone()
        if not user_carts_exists:
            print("DEBUG: Creating new 'user_carts' table with 'last_updated' column.")
            await db.execute("""
                CREATE TABLE user_carts (
                    user_id INTEGER PRIMARY KEY,
                    cart_items TEXT,
                    last_updated TEXT DEFAULT CURRENT_TIMESTAMP
                )""")
        else:
            cursor = await db.execute("PRAGMA table_info(user_carts)")
            columns = [col[1] for col in await cursor.fetchall()]
            if 'last_updated' not in columns:
                print("DEBUG: 'last_updated' column missing in 'user_carts'. Performing schema migration.")
                await db.execute("ALTER TABLE user_carts RENAME TO _old_user_carts")
                await db.execute("""
                    CREATE TABLE user_carts (
                        user_id INTEGER PRIMARY KEY,
                        cart_items TEXT,
                        last_updated TEXT DEFAULT CURRENT_TIMESTAMP
                    )""")
                await db.execute("""
                    INSERT INTO user_carts (user_id, cart_items, last_updated)
                    SELECT user_id, cart_items, CURRENT_TIMESTAMP FROM _old_user_carts
                """)
                await db.execute("DROP TABLE _old_user_carts")
                print("DEBUG: Schema migration for 'user_carts' complete.")
        await db.commit()

async def send_email(subject, body):
    msg = MIMEText(body)
    msg['Subject'] = subject
    msg['From'] = ADMIN_EMAIL
    msg['To'] = ADMIN_EMAIL
    try:
        with smtplib.SMTP_SSL('smtp.yandex.ru', 465) as server:
            server.login(ADMIN_EMAIL, EMAIL_PASSWORD)
            server.send_message(msg)
    except Exception as e:
        print(f"Email error: {e}")

async def notify_admin(message_text):
    try:
        await bot.send_message(YOUR_ADMIN_ID, message_text)
    except Exception as e:
        print(f"Telegram notify error: {e}")

# --- –§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö –∫–æ—Ä–∑–∏–Ω ---
async def clear_old_carts_task():
    while True:
        await asyncio.sleep(CLEANUP_INTERVAL_HOURS * 3600)
        print("DEBUG: Running old carts cleanup task...")
        async with aiosqlite.connect("products.db") as db:
            threshold_time = datetime.datetime.now() - datetime.timedelta(days=CART_LIFETIME_DAYS)
            threshold_time_str = threshold_time.strftime('%Y-%m-%d %H:%M:%S')
            await db.execute("DELETE FROM user_carts WHERE last_updated < ?", (threshold_time_str,))
            await db.commit()
            print(f"DEBUG: Old carts cleanup complete. Removed carts older than {threshold_time_str}")

# --- –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –∏ –∫–Ω–æ–ø–∫–∏ ---
@router.message(Command("start"))
async def start(message: types.Message):
    keyboard = [
        [KeyboardButton(text="üìã –ö–∞—Ç–∞–ª–æ–≥")],
        [KeyboardButton(text="üõí –ö–æ—Ä–∑–∏–Ω–∞")],
        [KeyboardButton(text="üì¶ –ú–æ–∏ –∑–∞–∫–∞–∑—ã")]
    ]
    if message.from_user.id == YOUR_ADMIN_ID:
        keyboard += [
            [KeyboardButton(text="üì• –ó–∞–∫–∞–∑—ã (–∞–¥–º–∏–Ω)"), KeyboardButton(text="üì§ –≠–∫—Å–ø–æ—Ä—Ç –∑–∞–∫–∞–∑–æ–≤")],
            [KeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä"), KeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ")],
            [KeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–≤–∞—Ä")]
        ]
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!", reply_markup=ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True))

@router.message(F.text == "üìã –ö–∞—Ç–∞–ª–æ–≥")
async def catalog(message: types.Message):
    async with aiosqlite.connect("products.db") as db:
        cursor = await db.execute("SELECT id, name, price, quantity FROM products")
        products = await cursor.fetchall()
    
    buttons = [[InlineKeyboardButton(text=f"{name} ({qty} —à—Ç) - {price / 100}‚ÇΩ", callback_data=f"add_{id}")]
               for id, name, price, qty in products if qty > 0]
    
    if buttons:
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä—ã:", reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons))
    else:
        await message.answer("–ö–∞—Ç–∞–ª–æ–≥ –ø—É—Å—Ç.")

@router.callback_query(F.data.startswith("add_"))
async def add_to_cart(callback: types.CallbackQuery):
    product_id = int(callback.data.split("_")[1])
    user_id = callback.from_user.id
    
    async with aiosqlite.connect("products.db") as db:
        cursor = await db.execute("SELECT quantity FROM products WHERE id = ?", (product_id,))
        product_qty_in_db = (await cursor.fetchone())[0]

    cart = await load_user_cart_from_db(user_id)
    user_cart[user_id] = cart

    current_qty_in_cart = 0
    for idx, (pid, qty) in enumerate(cart):
        if pid == product_id:
            current_qty_in_cart = qty
            break
    
    if current_qty_in_cart < product_qty_in_db:
        for idx, (pid, qty) in enumerate(cart):
            if pid == product_id:
                cart[idx] = (pid, qty + 1)
                break
        else:
            cart.append((product_id, 1))
        await save_user_cart_to_db(user_id, cart)
        await callback.answer("–î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∫–æ—Ä–∑–∏–Ω—É")
    else:
        await callback.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, —ç—Ç–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –±–æ–ª—å—à–µ –Ω–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏.", show_alert=True)

@router.message(F.text == "üõí –ö–æ—Ä–∑–∏–Ω–∞")
async def view_cart(message: types.Message):
    user_id = message.from_user.id
    print(f"DEBUG: view_cart called for user {user_id}")
    cart = await load_user_cart_from_db(user_id)
    user_cart[user_id] = cart

    if not cart:
        await message.answer("–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞")
        return
    
    text = "üõí **–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞**:\n\n"
    total_price = 0
    buttons = []
    async with aiosqlite.connect("products.db") as db:
        for pid, qty in cart:
            cursor = await db.execute("SELECT name, price FROM products WHERE id = ?", (pid,))
            result = await cursor.fetchone()
            if result:
                name, price = result
                item_total = price * qty / 100
                text += f"**{name}** ‚Äî {qty} —à—Ç ‚Äî {item_total:.2f}‚ÇΩ\n"
                total_price += item_total
                buttons.append([
                    InlineKeyboardButton(text=f"‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–ª-–≤–æ ({name})", callback_data=f"change_qty_item_id_{pid}"),
                    InlineKeyboardButton(text=f"üóëÔ∏è –£–¥–∞–ª–∏—Ç—å ({name})", callback_data=f"remove_item_id_{pid}")
                ])
            else:
                text += f"–¢–æ–≤–∞—Ä ID {pid} (—É–¥–∞–ª—ë–Ω –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞) ‚Äî {qty} —à—Ç\n"
                buttons.append([
                    InlineKeyboardButton(text=f"üóëÔ∏è –£–¥–∞–ª–∏—Ç—å (–¢–æ–≤–∞—Ä ID {pid})", callback_data=f"remove_item_id_{pid}")
                ])
    
    text += f"\n**–ò—Ç–æ–≥–æ**: {total_price:.2f}‚ÇΩ"
    
    markup = ReplyKeyboardMarkup(keyboard=[
        [KeyboardButton(text="üìã –ö–∞—Ç–∞–ª–æ–≥")],
        [KeyboardButton(text="‚úÖ –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑")],
        [KeyboardButton(text="üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É")]
    ], resize_keyboard=True)
    
    await message.answer(text, reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons), parse_mode="Markdown")
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)

@router.message(F.text == "üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É")
async def clear_cart(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    cart = await load_user_cart_from_db(user_id)
    user_cart[user_id] = cart

    if not cart:
        await message.answer("–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ —É–∂–µ –ø—É—Å—Ç–∞.")
        await start(message)  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        return

    await save_user_cart_to_db(user_id, [])
    user_cart[user_id] = []
    await message.answer("–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞.")
    await state.clear()
    await start(message)  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é

@router.callback_query(F.data.startswith("remove_item_id_"))
async def cart_remove_item_confirm(callback: types.CallbackQuery, state: FSMContext):
    product_id_to_remove = int(callback.data.split("_")[3])
    user_id = callback.from_user.id
    
    cart = await load_user_cart_from_db(user_id)
    user_cart[user_id] = cart

    user_cart[user_id] = [(pid, qty) for pid, qty in cart if pid != product_id_to_remove]
    
    await save_user_cart_to_db(user_id, user_cart[user_id])
    
    await callback.message.edit_text("–¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã.", reply_markup=None)
    await view_cart(callback.message)
    await callback.answer()
    await state.clear()

@router.callback_query(F.data.startswith("change_qty_item_id_"))
async def cart_change_qty_selected(callback: types.CallbackQuery, state: FSMContext):
    product_id_to_change = int(callback.data.split("_")[4])
    await state.update_data(product_id_to_change_qty=product_id_to_change)
    
    user_id = callback.from_user.id
    cart = await load_user_cart_from_db(user_id)
    user_cart[user_id] = cart

    current_qty = 0
    async with aiosqlite.connect("products.db") as db:
        cursor = await db.execute("SELECT name FROM products WHERE id = ?", (product_id_to_change,))
        result = await cursor.fetchone()
        product_name = result[0] if result else f"–¢–æ–≤–∞—Ä ID {product_id_to_change}"
    
    for pid, qty in cart:
        if pid == product_id_to_change:
            current_qty = qty
            break

    await state.set_state(UserStates.cart_change_qty_enter_new_qty)
    await callback.message.answer(f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è —Ç–æ–≤–∞—Ä–∞ **{product_name}** (—Ç–µ–∫—É—â–µ–µ: {current_qty} —à—Ç). –í–≤–µ–¥–∏—Ç–µ 0 –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã:", parse_mode="Markdown")
    await callback.answer()

@router.message(UserStates.cart_change_qty_enter_new_qty)
async def cart_change_qty_process(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    try:
        new_quantity = int(message.text)
        if new_quantity < 0:
            raise ValueError("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º.")
        
        data = await state.get_data()
        product_id = data.get('product_id_to_change_qty')

        if not product_id:
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            await state.clear()
            return

        async with aiosqlite.connect("products.db") as db:
            cursor = await db.execute("SELECT name, quantity FROM products WHERE id = ?", (product_id,))
            result = await cursor.fetchone()
            if not result:
                await message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, —ç—Ç–æ—Ç —Ç–æ–≤–∞—Ä –±—ã–ª —É–¥–∞–ª—ë–Ω –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞. –í—ã –º–æ–∂–µ—Ç–µ —É–¥–∞–ª–∏—Ç—å –µ–≥–æ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã, –Ω–∞–∂–∞–≤ '–£–¥–∞–ª–∏—Ç—å'.")
                await state.clear()
                await view_cart(message)
                return

            product_name, available_qty_in_db = result

        if new_quantity > available_qty_in_db:
            await message.answer(f"–ò–∑–≤–∏–Ω–∏—Ç–µ, –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ {available_qty_in_db} —à—Ç. —Ç–æ–≤–∞—Ä–∞ '{product_name}'. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ –±–æ–ª–µ–µ {available_qty_in_db}.")
            return

        cart = await load_user_cart_from_db(user_id)
        user_cart[user_id] = cart

        found = False
        for idx, (pid, qty) in enumerate(cart):
            if pid == product_id:
                if new_quantity == 0:
                    cart.pop(idx)
                    await message.answer(f"–¢–æ–≤–∞—Ä '{product_name}' —É–¥–∞–ª—ë–Ω –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã.")
                else:
                    cart[idx] = (pid, new_quantity)
                    await message.answer(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ '{product_name}' –æ–±–Ω–æ–≤–ª–µ–Ω–æ –¥–æ {new_quantity} —à—Ç.")
                found = True
                break
        
        if not found:
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: —Ç–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –≤–∞—à–µ–π –∫–æ—Ä–∑–∏–Ω–µ.")

        await save_user_cart_to_db(user_id, user_cart[user_id])
        await state.clear()
        await view_cart(message)
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ (—Ü–µ–ª–æ–µ –Ω–µ–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ).")

@router.message(F.text == "‚úÖ –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑")
async def start_order_process(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    cart = await load_user_cart_from_db(user_id)
    user_cart[user_id] = cart

    if not cart:
        await message.answer("–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞. –î–æ–±–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä—ã, –ø—Ä–µ–∂–¥–µ —á–µ–º –æ—Ñ–æ—Ä–º–ª—è—Ç—å –∑–∞–∫–∞–∑.")
        await state.clear()
        return
    await state.set_state(UserStates.awaiting_delivery_name)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–∏ —Ñ–∞–º–∏–ª–∏—é –∏ –∏–º—è:")

@router.message(UserStates.awaiting_delivery_name)
async def process_delivery_name(message: types.Message, state: FSMContext):
    await state.update_data(delivery_name=message.text)
    await state.set_state(UserStates.awaiting_delivery_address)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≥–æ—Ä–æ–¥, —É–ª–∏—Ü—É, –¥–æ–º, –∫–≤–∞—Ä—Ç–∏—Ä—É (–Ω–∞–ø—Ä–∏–º–µ—Ä: –ú–æ—Å–∫–≤–∞, —É–ª. –õ–µ–Ω–∏–Ω–∞, –¥. 10, –∫–≤. 5):")

@router.message(UserStates.awaiting_delivery_address)
async def process_delivery_address(message: types.Message, state: FSMContext):
    await state.update_data(delivery_address=message.text)
    await state.set_state(UserStates.awaiting_delivery_phone)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: +79123456789):")

@router.message(UserStates.awaiting_delivery_phone)
async def process_delivery_phone(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    phone_number = message.text
    await state.update_data(delivery_phone=phone_number)
    
    cart = await load_user_cart_from_db(user_id)
    user_cart[user_id] = cart

    data = await state.get_data()
    delivery_name = data.get('delivery_name')
    delivery_address = data.get('delivery_address')
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–≤–æ–¥–∫—É –∑–∞–∫–∞–∑–∞
    full_delivery_info = f"**–î–∞–Ω–Ω—ã–µ –¥–æ—Å—Ç–∞–≤–∫–∏**:\n–ò–º—è: {delivery_name}\n–ê–¥—Ä–µ—Å: {delivery_address}\n–¢–µ–ª–µ—Ñ–æ–Ω: {phone_number}\n\n"
    order_summary = f"**–í–∞—à –∑–∞–∫–∞–∑**:\n"
    total_price = 0
    async with aiosqlite.connect("products.db") as db:
        for pid, qty in cart:
            cursor = await db.execute("SELECT name, price FROM products WHERE id = ?", (pid,))
            result = await cursor.fetchone()
            if result:
                name, price = result
                item_total = price * qty / 100
                order_summary += f"- {name} ({qty} —à—Ç) ‚Äî {item_total:.2f}‚ÇΩ\n"
                total_price += item_total
            else:
                order_summary += f"- –¢–æ–≤–∞—Ä ID {pid} (—É–¥–∞–ª—ë–Ω –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞) ‚Äî {qty} —à—Ç\n"
    
    order_summary += f"\n**–ò—Ç–æ–≥–æ**: {total_price:.2f}‚ÇΩ"
    full_summary = full_delivery_info + order_summary

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ–≤–∞—Ä–æ–≤
    async with aiosqlite.connect("products.db") as db:
        for pid, qty in cart:
            cursor = await db.execute("SELECT quantity FROM products WHERE id = ?", (pid,))
            available_qty = (await cursor.fetchone())[0]
            if qty > available_qty:
                await message.answer(f"–ò–∑–≤–∏–Ω–∏—Ç–µ, —Ç–æ–≤–∞—Ä–∞ —Å ID {pid} –Ω–µ—Ç –≤ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ. –î–æ—Å—Ç—É–ø–Ω–æ: {available_qty} —à—Ç.")
                await state.clear()
                await start(message)
                return

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–≤–æ–¥–∫—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    buttons = [
        [InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_order")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_order")]
    ]
    await state.set_state(UserStates.awaiting_order_confirmation)
    await message.answer(full_summary, reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons), parse_mode="Markdown")

@router.callback_query(F.data == "confirm_order", UserStates.awaiting_order_confirmation)
async def confirm_order(callback: types.CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    cart = await load_user_cart_from_db(user_id)
    user_cart[user_id] = cart

    data = await state.get_data()
    delivery_name = data.get('delivery_name')
    delivery_address = data.get('delivery_address')
    phone_number = data.get('delivery_phone')
    full_delivery_info = f"–ò–º—è: {delivery_name}\n–ê–¥—Ä–µ—Å: {delivery_address}\n–¢–µ–ª–µ—Ñ–æ–Ω: {phone_number}"

    async with aiosqlite.connect("products.db") as db:
        cursor = await db.execute("INSERT INTO orders (user_id, delivery_info) VALUES (?, ?)", (user_id, full_delivery_info))
        await db.commit()
        order_id = cursor.lastrowid
        
        for pid, qty in cart:
            await db.execute("INSERT INTO order_items (order_id, product_id, quantity) VALUES (?, ?, ?)", (order_id, pid, qty))
            await db.execute("UPDATE products SET quantity = quantity - ? WHERE id = ?", (qty, pid))
        await db.commit()

    await save_user_cart_to_db(user_id, [])
    user_cart[user_id] = []
    await state.clear()

    await callback.message.edit_text(f"–í–∞—à –∑–∞–∫–∞–∑ #{order_id} –æ—Ñ–æ—Ä–º–ª–µ–Ω!", reply_markup=None)
    await start(callback.message)

    order_details_for_admin = f"–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ #{order_id} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback.from_user.full_name} (ID: {user_id})\n"
    order_details_for_admin += f"–î–∞–Ω–Ω—ã–µ –¥–æ—Å—Ç–∞–≤–∫–∏:\n{full_delivery_info}\n\n–°–æ—Å—Ç–∞–≤ –∑–∞–∫–∞–∑–∞:\n"
    async with aiosqlite.connect("products.db") as db:
        for pid, qty in cart:
            cursor = await db.execute("SELECT name, price FROM products WHERE id = ?", (pid,))
            result = await cursor.fetchone()
            if result:
                name, price = result
                order_details_for_admin += f"- {name} ({qty} —à—Ç) - {price * qty / 100:.2f}‚ÇΩ\n"
            else:
                order_details_for_admin += f"- –¢–æ–≤–∞—Ä ID {pid} (—É–¥–∞–ª—ë–Ω –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞) ‚Äî {qty} —à—Ç\n"

    await notify_admin(order_details_for_admin)
    await send_email("–ù–æ–≤—ã–π –∑–∞–∫–∞–∑", order_details_for_admin)
    await callback.answer()

@router.callback_query(F.data == "cancel_order", UserStates.awaiting_order_confirmation)
async def cancel_order(callback: types.CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.edit_text("–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=None)
    await start(callback.message)
    await callback.answer()

@router.message(F.text == "üì¶ –ú–æ–∏ –∑–∞–∫–∞–∑—ã")
async def my_orders(message: types.Message):
    user_id = message.from_user.id
    async with aiosqlite.connect("products.db") as db:
        cursor = await db.execute("SELECT id, status FROM orders WHERE user_id = ?", (user_id,))
        orders = await cursor.fetchall()
    if not orders:
        await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤.")
        return
    reply = "–í–∞—à–∏ –∑–∞–∫–∞–∑—ã:\n" + "\n".join([f"#{oid} ‚Äî {status}" for oid, status in orders])
    await message.answer(reply)

# --- –ê–¥–º–∏–Ω—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---
@router.message(F.text == "üì• –ó–∞–∫–∞–∑—ã (–∞–¥–º–∏–Ω)", F.from_user.id == YOUR_ADMIN_ID)
async def admin_orders(message: types.Message):
    async with aiosqlite.connect("products.db") as db:
        cursor = await db.execute("SELECT id, user_id, status FROM orders")
        orders = await cursor.fetchall()
    
    if not orders:
        await message.answer("–ü–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤.")
        return

    buttons = [[InlineKeyboardButton(text=f"–ó–∞–∫–∞–∑ #{oid} –æ—Ç {uid} ‚Äî {status}", callback_data=f"status_{oid}")]
               for oid, uid, status in orders]
    await message.answer("–°–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤:", reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons))

@router.callback_query(F.data.startswith("status_"), F.from_user.id == YOUR_ADMIN_ID)
async def status_update(callback: types.CallbackQuery):
    order_id = int(callback.data.split('_')[1])
    statuses = ["–ü—Ä–∏–Ω—è—Ç", "–û—Ç–ø—Ä–∞–≤–ª–µ–Ω", "–ó–∞–≤–µ—Ä—à–µ–Ω"]
    buttons = [[InlineKeyboardButton(text=s, callback_data=f"set_{order_id}_{s}")] for s in statuses]
    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å:", reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons))
    await callback.answer()

@router.callback_query(F.data.startswith("set_"), F.from_user.id == YOUR_ADMIN_ID)
async def set_status(callback: types.CallbackQuery):
    _, order_id, new_status = callback.data.split("_", 2)
    order_id = int(order_id)
    async with aiosqlite.connect("products.db") as db:
        await db.execute("UPDATE orders SET status = ? WHERE id = ?", (new_status, order_id))
        cursor = await db.execute("SELECT user_id FROM orders WHERE id = ?", (order_id,))
        user = await cursor.fetchone()
        await db.commit()
    
    if user:
        try:
            await bot.send_message(user[0], f"–°—Ç–∞—Ç—É—Å –≤–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞ #{order_id} –∏–∑–º–µ–Ω—ë–Ω –Ω–∞: {new_status}")
        except Exception as e:
            await notify_admin(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user[0]} –æ —Å–º–µ–Ω–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞ #{order_id}: {e}")
    await callback.answer(f"–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ #{order_id} –æ–±–Ω–æ–≤–ª—ë–Ω –Ω–∞ {new_status}")
    await admin_orders(callback.message)

@router.message(F.text == "üì§ –≠–∫—Å–ø–æ—Ä—Ç –∑–∞–∫–∞–∑–æ–≤", F.from_user.id == YOUR_ADMIN_ID)
async def export_orders(message: types.Message):
    async with aiosqlite.connect("products.db") as db:
        wb = Workbook()
        ws_orders = wb.active
        ws_orders.title = "–ó–∞–∫–∞–∑—ã"
        ws_orders.append(["ID –ó–∞–∫–∞–∑–∞", "ID –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–æ—Å—Ç–∞–≤–∫–µ", "–°—Ç–∞—Ç—É—Å", "–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å (‚ÇΩ)"])
        ws_order_details = wb.create_sheet("–î–µ—Ç–∞–ª–∏ –ó–∞–∫–∞–∑–æ–≤")
        ws_order_details.append(["ID –ó–∞–∫–∞–∑–∞", "–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞", "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ", "–¶–µ–Ω–∞ –∑–∞ –µ–¥. (‚ÇΩ)", "–°—É–º–º–∞ (‚ÇΩ)"])
        ws_products = wb.create_sheet("–ö–∞—Ç–∞–ª–æ–≥ –¢–æ–≤–∞—Ä–æ–≤")
        ws_products.append(["ID –¢–æ–≤–∞—Ä–∞", "–ù–∞–∑–≤–∞–Ω–∏–µ", "–¶–µ–Ω–∞ (‚ÇΩ)", "–û–ø–∏—Å–∞–Ω–∏–µ", "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ"])
        cursor_orders = await db.execute("SELECT id, user_id, delivery_info, status FROM orders")
        orders_data = await cursor_orders.fetchall()
        all_order_items_data = []
        for order_id, user_id, delivery_info, status in orders_data:
            order_total = 0
            cursor_items = await db.execute("SELECT product_id, quantity FROM order_items WHERE order_id = ?", (order_id,))
            order_items = await cursor_items.fetchall()
            for product_id, item_qty in order_items:
                cursor_product = await db.execute("SELECT name, price FROM products WHERE id = ?", (product_id,))
                product_info = await cursor_product.fetchone()
                product_name = f"–¢–æ–≤–∞—Ä ID {product_id} (—É–¥–∞–ª—ë–Ω)" if not product_info else product_info[0]
                product_price = 0 if not product_info else product_info[1] / 100
                item_total_cost = product_price * item_qty
                order_total += item_total_cost
                all_order_items_data.append([order_id, product_name, item_qty, product_price, item_total_cost])
            ws_orders.append([order_id, user_id, delivery_info, status, order_total])
        for row in all_order_items_data:
            ws_order_details.append(row)
        cursor_products_catalog = await db.execute("SELECT id, name, price, description, quantity FROM products")
        for row in await cursor_products_catalog.fetchall():
            ws_products.append([row[0], row[1], row[2] / 100, row[3], row[4]])
        path = "orders_export.xlsx"
        wb.save(path)
    await bot.send_document(message.chat.id, types.FSInputFile(path), caption="–≠–∫—Å–ø–æ—Ä—Ç –∑–∞–∫–∞–∑–æ–≤, –∏—Ö –¥–µ—Ç–∞–ª–µ–π –∏ –∫–∞—Ç–∞–ª–æ–≥–∞ —Ç–æ–≤–∞—Ä–æ–≤")
    os.remove(path)

# --- –ê–¥–º–∏–Ω—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ ---
@router.message(F.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä", F.from_user.id == YOUR_ADMIN_ID)
async def add_product_start(message: types.Message, state: FSMContext):
    await state.set_state(AdminStates.add_product_name)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:")

@router.message(AdminStates.add_product_name)
async def add_product_name(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text)
    await state.set_state(AdminStates.add_product_price)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞ –≤ —Ä—É–±–ª—è—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä, 123.45):")

@router.message(AdminStates.add_product_price)
async def add_product_price(message: types.Message, state: FSMContext):
    try:
        price = float(message.text)
        await state.update_data(price=int(price * 100))
        await state.set_state(AdminStates.add_product_description)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:")
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ü–µ–Ω—É (—á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä 123.45).")

@router.message(AdminStates.add_product_description)
async def add_product_description(message: types.Message, state: FSMContext):
    await state.update_data(description=message.text)
    await state.set_state(AdminStates.add_product_quantity)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞—á–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞:")

@router.message(AdminStates.add_product_quantity)
async def add_product_quantity(message: types.Message, state: FSMContext):
    try:
        quantity = int(message.text)
        if quantity < 0:
            raise ValueError("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º.")
        product_data = await state.get_data()
        name = product_data['name']
        price = product_data['price']
        description = product_data['description']
        async with aiosqlite.connect("products.db") as db:
            await db.execute(
                "INSERT INTO products (name, price, description, quantity) VALUES (?, ?, ?, ?)",
                (name, price, description, quantity)
            )
            await db.commit()
        await message.answer(f"–¢–æ–≤–∞—Ä '{name}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–∞—Ç–∞–ª–æ–≥!")
        await state.clear()
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ (—Ü–µ–ª–æ–µ –Ω–µ–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ).")

@router.message(F.text == "üîÑ –û–±–Ω–æ–≤–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ", F.from_user.id == YOUR_ADMIN_ID)
async def update_quantity_start(message: types.Message, state: FSMContext):
    async with aiosqlite.connect("products.db") as db:
        cursor = await db.execute("SELECT id, name, quantity FROM products")
        products = await cursor.fetchall()
    
    if not products:
        await message.answer("–ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤ –ø—É—Å—Ç. –ù–µ—á–µ–≥–æ –æ–±–Ω–æ–≤–ª—è—Ç—å.")
        await state.clear()
        return

    buttons = [[InlineKeyboardButton(text=f"{name} (—Ç–µ–∫—É—â–µ–µ: {qty} —à—Ç)", callback_data=f"select_qty_{id}")]
               for id, name, qty in products]
    
    await state.set_state(AdminStates.update_quantity_select_product)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å:", 
                         reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons))

@router.callback_query(F.data.startswith("select_qty_"), AdminStates.update_quantity_select_product, F.from_user.id == YOUR_ADMIN_ID)
async def update_quantity_select_product_callback(callback: types.CallbackQuery, state: FSMContext):
    product_id = int(callback.data.split("_")[2])
    await state.update_data(product_id_to_update=product_id)
    await state.set_state(AdminStates.update_quantity_enter_new_qty)
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è —ç—Ç–æ–≥–æ —Ç–æ–≤–∞—Ä–∞:")
    await callback.answer()

@router.message(AdminStates.update_quantity_enter_new_qty)
async def update_quantity_enter_new_qty(message: types.Message, state: FSMContext):
    try:
        new_quantity = int(message.text)
        if new_quantity < 0:
            raise ValueError("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º.")
        data = await state.get_data()
        product_id = data.get('product_id_to_update')
        if not product_id:
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞, –Ω–∞—á–∏–Ω–∞—è —Å –∫–Ω–æ–ø–∫–∏ '–û–±–Ω–æ–≤–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ'.")
            await state.clear()
            return
        async with aiosqlite.connect("products.db") as db:
            await db.execute("UPDATE products SET quantity = ? WHERE id = ?", (new_quantity, product_id))
            await db.commit()
            cursor = await db.execute("SELECT name FROM products WHERE id = ?", (product_id,))
            product_name = (await cursor.fetchone())[0]
        await message.answer(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ '{product_name}' —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ –¥–æ {new_quantity} —à—Ç!")
        await state.clear()
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ (—Ü–µ–ª–æ–µ –Ω–µ–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ).")

@router.message(F.text == "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–≤–∞—Ä", F.from_user.id == YOUR_ADMIN_ID)
async def edit_product_start(message: types.Message, state: FSMContext):
    async with aiosqlite.connect("products.db") as db:
        cursor = await db.execute("SELECT id, name FROM products")
        products = await cursor.fetchall()
    
    if not products:
        await message.answer("–ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤ –ø—É—Å—Ç. –ù–µ—á–µ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å.")
        await state.clear()
        return

    buttons = [[InlineKeyboardButton(text=name, callback_data=f"edit_product_id_{id}")]
               for id, name in products]
    
    await state.set_state(AdminStates.edit_product_select)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:", 
                         reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons))

@router.callback_query(F.data.startswith("edit_product_id_"), AdminStates.edit_product_select, F.from_user.id == YOUR_ADMIN_ID)
async def edit_product_selected(callback: types.CallbackQuery, state: FSMContext):
    product_id = int(callback.data.split("_")[3])
    await state.update_data(product_id_to_edit=product_id)
    
    async with aiosqlite.connect("products.db") as db:
        cursor = await db.execute("SELECT name, price, description FROM products WHERE id = ?", (product_id,))
        name, price, description = await cursor.fetchone()

    await state.update_data(
        current_name=name,
        current_price=price,
        current_description=description
    )

    markup = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ", callback_data="edit_name")],
        [InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å —Ü–µ–Ω—É", callback_data="edit_price")],
        [InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ", callback_data="edit_description")],
        [InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="cancel_edit")]
    ])
    await state.set_state(AdminStates.edit_product_menu)
    await callback.message.edit_text(
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ç–æ–≤–∞—Ä: **{name}**\n"
        f"–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {price / 100:.2f}‚ÇΩ\n"
        f"–¢–µ–∫—É—â–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ: {description}\n\n"
        "–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?",
        reply_markup=markup,
        parse_mode="Markdown"
    )
    await callback.answer()

@router.message(AdminStates.edit_product_menu)
async def handle_unexpected_text_in_edit_menu(message: types.Message):
    markup = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ", callback_data="edit_name")],
        [InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å —Ü–µ–Ω—É", callback_data="edit_price")],
        [InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ", callback_data="edit_description")],
        [InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="cancel_edit")]
    ])
    await message.answer(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ, –∏—Å–ø–æ–ª—å–∑—É—è –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ.\n\n"
        "–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?",
        reply_markup=markup
    )

@router.callback_query(F.data == "edit_name", AdminStates.edit_product_menu, F.from_user.id == YOUR_ADMIN_ID)
async def edit_product_name_prompt(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    current_name = data.get('current_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
    await state.set_state(AdminStates.edit_product_name_input)
    await callback.message.answer(f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è —Ç–æ–≤–∞—Ä–∞ (—Ç–µ–∫—É—â–µ–µ: **{current_name}**):", parse_mode="Markdown")
    await callback.answer()

@router.message(AdminStates.edit_product_name_input)
async def edit_product_name_process(message: types.Message, state: FSMContext):
    new_name = message.text
    data = await state.get_data()
    product_id = data.get('product_id_to_edit')
    if not product_id:
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞, –Ω–∞—á–∏–Ω–∞—è —Å –∫–Ω–æ–ø–∫–∏ '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–≤–∞—Ä'.")
        await state.clear()
        return
    async with aiosqlite.connect("products.db") as db:
        await db.execute("UPDATE products SET name = ? WHERE id = ?", (new_name, product_id))
        await db.commit()
    await message.answer(f"–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞: **{new_name}**", parse_mode="Markdown")
    await state.clear()

@router.callback_query(F.data == "edit_price", AdminStates.edit_product_menu, F.from_user.id == YOUR_ADMIN_ID)
async def edit_product_price_prompt(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    current_price = data.get('current_price', 0) / 100
    await state.set_state(AdminStates.edit_product_price_input)
    await callback.message.answer(f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–Ω—É –¥–ª—è —Ç–æ–≤–∞—Ä–∞ –≤ —Ä—É–±–ª—è—Ö (—Ç–µ–∫—É—â–∞—è: **{current_price:.2f}‚ÇΩ**):", parse_mode="Markdown")
    await callback.answer()

@router.message(AdminStates.edit_product_price_input)
async def edit_product_price_process(message: types.Message, state: FSMContext):
    try:
        new_price_float = float(message.text)
        new_price_int = int(new_price_float * 100)
        if new_price_int < 0:
            raise ValueError("–¶–µ–Ω–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π.")
        data = await state.get_data()
        product_id = data.get('product_id_to_edit')
        if not product_id:
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞, –Ω–∞—á–∏–Ω–∞—è —Å –∫–Ω–æ–ø–∫–∏ '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–≤–∞—Ä'.")
            await state.clear()
            return
        async with aiosqlite.connect("products.db") as db:
            await db.execute("UPDATE products SET price = ? WHERE id = ?", (new_price_int, product_id))
            await db.commit()
        await message.answer(f"–¶–µ–Ω–∞ —Ç–æ–≤–∞—Ä–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞: **{new_price_float:.2f}‚ÇΩ**", parse_mode="Markdown")
        await state.clear()
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ü–µ–Ω—É (—á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä 123.45).")

@router.callback_query(F.data == "edit_description", AdminStates.edit_product_menu, F.from_user.id == YOUR_ADMIN_ID)
async def edit_product_description_prompt(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    current_description = data.get('current_description', '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è')
    await state.set_state(AdminStates.edit_product_description_input)
    await callback.message.answer(f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è —Ç–æ–≤–∞—Ä–∞ (—Ç–µ–∫—É—â–µ–µ: **{current_description}**):", parse_mode="Markdown")
    await callback.answer()

@router.message(AdminStates.edit_product_description_input)
async def edit_product_description_process(message: types.Message, state: FSMContext):
    new_description = message.text
    data = await state.get_data()
    product_id = data.get('product_id_to_edit')
    if not product_id:
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞, –Ω–∞—á–∏–Ω–∞—è —Å –∫–Ω–æ–ø–∫–∏ '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–≤–∞—Ä'.")
        await state.clear()
        return
    async with aiosqlite.connect("products.db") as db:
        await db.execute("UPDATE products SET description = ? WHERE id = ?", (new_description, product_id))
        await db.commit()
    await message.answer(f"–û–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞: **{new_description}**", parse_mode="Markdown")
    await state.clear()

@router.callback_query(F.data == "cancel_edit", AdminStates.edit_product_menu, F.from_user.id == YOUR_ADMIN_ID)
async def cancel_edit_product(callback: types.CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.edit_text("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    await callback.answer()

# --- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ---
async def main():
    await init_db()
    await asyncio.gather(
        dp.start_polling(bot),
        clear_old_carts_task()
    )

if __name__ == '__main__':
    asyncio.run(main())